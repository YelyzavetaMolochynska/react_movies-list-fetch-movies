{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","setMovies","useState","isLoading","setIsLoading","movieIsNotFound","setMovieIsNotFound","setQuery","searchedMovie","setSearchedMovie","convertMovie","Poster","Title","Plot","imdbID","findMovie","inputQuery","a","response","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","classNames","value","onChange","currentTarget","disabled","length","onClick","alreadyAdded","some","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18080123.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=ad1b2f6d';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { MovieCard } from '../MovieCard';\nimport { MovieData } from '../../types/MovieData';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[],\n  setMovies: (movies: Movie[]) => void,\n};\n\nexport const FindMovie: React.FC<Props> = ({ movies, setMovies }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [movieIsNotFound, setMovieIsNotFound] = useState(false);\n  const [query, setQuery] = useState('');\n  const [searchedMovie, setSearchedMovie] = useState<Movie | null>(null);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setMovieIsNotFound(false);\n    setQuery(event.currentTarget.value);\n  };\n\n  const convertMovie = ({\n    Poster,\n    Title,\n    Plot,\n    imdbID,\n  }: MovieData) => ({\n    title: Title,\n    description: Plot,\n    imgUrl: Poster === 'N/A'\n      ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n      : Poster,\n    imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n    imdbId: imdbID,\n  });\n\n  const findMovie = async (inputQuery: string) => {\n    setIsLoading(true);\n    setMovieIsNotFound(false);\n    const response = await getMovie(inputQuery) as MovieData;\n\n    if (!response.Title) {\n      setMovieIsNotFound(true);\n      setSearchedMovie(null);\n    } else {\n      const movie = convertMovie(response);\n\n      setSearchedMovie(movie);\n    }\n\n    setIsLoading(false);\n  };\n\n  const handleSearch = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setMovieIsNotFound(false);\n    setIsLoading(true);\n    findMovie(query);\n  };\n\n  const addMovie = () => {\n    const alreadyAdded = movies.some(\n      movie => movie.imdbId === searchedMovie?.imdbId,\n    );\n\n    if (movies && searchedMovie && !alreadyAdded) {\n      setMovies([...movies, searchedMovie]);\n    }\n\n    setSearchedMovie(null);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSearch}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', {\n                'is-danger': movieIsNotFound,\n              })}\n              value={query}\n              onChange={handleChange}\n            />\n          </div>\n\n          {movieIsNotFound && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button',\n                'is-light',\n                { 'is-loading': isLoading },\n              )}\n              disabled={query.length === 0}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {searchedMovie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={addMovie}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {searchedMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={searchedMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          movies={movies}\n          setMovies={setMovies}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}